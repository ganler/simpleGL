#version 410 core

in vec2 text_coord;
in vec3 norms;
in vec3 frag_pos;

out vec4 frag_color;

uniform vec3 light_pos;
uniform vec3 view_pos;
uniform sampler2D texture_source;

void main(void)
{
    vec3 light_color = vec3(1.0, 1.8, 1.5);
    vec4 obj_color = texture(texture_source, text_coord);

    // Ambient
    float ambient_fac = 0.15;
    vec3 ambient = ambient_fac * light_color;

    // Diffuse
    vec3 nnorms = normalize(norms);
    vec3 light_dir = normalize(light_pos - frag_pos);
    float diff = max(dot(nnorms, light_dir), 0.0);
    vec3 diffuse = diff * light_color;

    // Specular
    float specular_fac = 0.4;
    vec3 view_dir = normalize(view_pos - frag_pos);
    vec3 reflect_dir = reflect(-light_dir, nnorms);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 16); // 反射光别太强了
    vec3 specular = specular_fac * spec * light_color;

    vec3 result = (ambient + diffuse + specular) * obj_color.xyz;
    frag_color = vec4(result, 1.0);
}